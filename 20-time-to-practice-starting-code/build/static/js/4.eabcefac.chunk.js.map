{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","getAllComments","data","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","onClick","removeComment","CommentsList","onRemoveComment","removeCommentHandler","comments","map","comment","Comments","useParams","useState","isAddingComment","setIsAddingComment","loadedComments","addedCommentHandler","useCallback","length","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","to","path","exact","url","component"],"mappings":"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","file":"static/js/4.eabcefac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment, getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { data: loadedComments } = useHttp(getAllComments);\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","\nimport classes from './CommentItem.module.css';\n\n\nconst CommentItem = (props) => {\n\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n      <button onClick={props.removeComment}>Delete</button>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import { useEffect } from \"react\";\n\nimport CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { removeComment } from \"../../lib/api\";\n\nconst CommentsList = (props) => {\n  const { onRemoveComment } = props;\n  const { sendRequest, status, error } = useHttp(removeComment);\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onRemoveComment();\n    }\n  }, [status, error, onRemoveComment]);\n\n  const removeCommentHandler = (event) => {\n    event.preventDefault();\n    sendRequest({ quoteId: props.id });\n  };\n\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem\n          id={comment.id}\n          key={comment.id}\n          text={comment.text}\n          removeComment={removeCommentHandler}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const params = useParams();\n  const quoteId = params.quoteId;\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const removeCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"params\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = (\n      <CommentsList\n        comments={loadedComments}\n        onRemoveComment={removeCommentHandler}\n      />\n    );\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <h2 className=\"centered\">No Comments Were Added Yet</h2>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n  const {quoteId} = params\n\n  const {\n    data: loadedQuote,\n    sendRequest,\n    status,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId])\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (error) {\n    return <p className='centered'>{error}</p>\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No Quote Found!</p>\n  }\n\n  return (\n    <>\n      <Link to=\"/quotes\">Back</Link>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`} component={Comments} />\n    </>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}