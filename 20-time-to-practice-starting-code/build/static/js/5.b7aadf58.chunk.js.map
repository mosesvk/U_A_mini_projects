{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","match","useRouteMatch","className","classes","item","text","author","to","url","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","path","list","map","quote","NoQuotesFound","console","log","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCoBdC,EAlBG,SAACC,GACjB,IAAMC,EAAQC,cAEd,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAErB,cAAC,IAAD,CAAMC,GAAE,UAAKP,EAAMQ,IAAX,YAAkBT,EAAMU,IAAMP,UAAU,MAAhD,iC,iBCyCSQ,EAxCG,SAACX,GACjB,IAXkBY,EAAQC,EAWpBC,EAAUC,cACVC,EAAWC,cACXhB,EAAQC,cAIRgB,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GAnBYV,EAmBcZ,EAAMY,OAnBZC,EAmBoBK,EAlBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAwBxC,OACE,qCACE,qBAAKP,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAXe,WAC3Bb,EAAQc,KAAK,CACXC,SAAU5B,EAAM6B,KAChBV,OAAO,SAAD,OAAWF,EAAqB,OAAS,UAQ7C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIf,UAAWC,IAAQ2B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEvB,GAAIuB,EAAMvB,GACVH,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMvB,a,yBC5BRwB,EAbO,WACpB,IAAMjC,EAAQC,cAEd,OADAiC,QAAQC,IAAInC,GAEV,sBAAKE,UAAWC,IAAQiC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMlC,UAAU,MAAMK,GAAG,cAAzB,6B,gBCiCS8B,UAjCG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKvC,UAAU,WAAf,SACE,cAAC4C,EAAA,EAAD,MAKFF,EACK,mBAAG1C,UAAU,mBAAb,SAAiC0C,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAMtD,cAAC,EAAD,CAAWpC,OAAQ+B,IALjB,cAAC,EAAD","file":"static/js/5.b7aadf58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import { Link, useRouteMatch } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  const match = useRouteMatch();\n  \n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`${match.url}/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useHistory, useLocation, useRouteMatch } from \"react-router\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const match = useRouteMatch();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\"; // this is the 'sort' from the history.push(\"quotes?sort=asc\") => So this will return \"asc\" since it says \"sort=asc\"\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: match.path,\n      search:`?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    })\n    // history.push(`${match.path}?sort=` + (isSortingAscending ? \"desc\" : \"asc\")); // the simpler way, but the first push is better for more complex url's \n  };\n\n  return (\n    <>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default QuoteList;\n","import { Link, useRouteMatch } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  const match = useRouteMatch();\n  console.log(match)\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quotes'>\n        Add a Quote  \n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\n\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\n\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest()\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (error) {\n    return <p className='centered focused'>{error}</p>\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />\n  }\n\n\n\n  return <QuoteList quotes={loadedQuotes} />;\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}